#include <iostream>
#include <vector>
#include <string>

using namespace std;

void part1_solution(vector <pair<string,int>>);
void part2_solution(vector <pair<string,int>>);

int main()
{
    vector <pair <string, int>> subMoving;
    string strInput[1000] = {"forward", "down", "forward", "forward", "down", "up", "down", "up", "down", "down", "forward", "up", "down", "down", "down", "down", "forward", "up", "forward", "forward", "up", "forward", "up", "forward", "down", "up", "down", "down", "down", "forward", "forward", "down", "forward", "up", "down", "up", "forward", "forward", "up", "forward", "up", "forward", "down", "down", "down", "up", "up", "down", "forward", "down", "up", "down", "forward", "down", "down", "forward", "down", "forward", "down", "down", "forward", "forward", "down", "up", "forward", "forward", "up", "down", "down", "down", "forward", "forward", "down", "up", "forward", "forward", "up", "up", "down", "forward", "up", "down", "up", "down", "down", "forward", "forward", "forward", "down", "down", "down", "forward", "down", "forward", "down", "down", "up", "down", "up", "forward", "forward", "down", "up", "down", "forward", "down", "up", "down", "forward", "down", "down", "forward", "up", "up", "forward", "forward", "down", "forward", "forward", "forward", "down", "down", "up", "forward", "forward", "down", "forward", "forward", "down", "up", "forward", "forward", "down", "up", "forward", "down", "down", "forward", "down", "forward", "down", "forward", "up", "up", "down", "down", "forward", "forward", "down", "up", "forward", "up", "down", "forward", "up", "up", "down", "down", "up", "up", "forward", "down", "forward", "up", "up", "down", "down", "forward", "down", "down", "down", "forward", "forward", "forward", "forward", "up", "up", "up", "forward", "up", "down", "up", "forward", "down", "down", "forward", "forward", "down", "up", "up", "forward", "forward", "forward", "up", "forward", "up", "forward", "down", "forward", "down", "down", "down", "forward", "forward", "up", "forward", "down", "down", "forward", "forward", "forward", "up", "forward", "down", "down", "up", "up", "forward", "down", "forward", "forward", "down", "up", "forward", "forward", "down", "forward", "down", "down", "forward", "up", "forward", "down", "down", "down", "forward", "down", "forward", "forward", "up", "down", "down", "up", "up", "forward", "forward", "down", "forward", "down", "down", "forward", "forward", "down", "forward", "forward", "forward", "up", "down", "down", "down", "up", "up", "forward", "down", "forward", "down", "down", "forward", "down", "forward", "up", "forward", "forward", "down", "forward", "down", "up", "down", "forward", "forward", "down", "down", "forward", "down", "forward", "down", "down", "forward", "forward", "up", "down", "down", "down", "down", "forward", "down", "forward", "down", "forward", "forward", "down", "forward", "down", "forward", "down", "down", "forward", "down", "down", "down", "up", "forward", "up", "up", "forward", "down", "up", "down", "down", "down", "forward", "down", "down", "forward", "forward", "forward", "up", "down", "forward", "forward", "forward", "forward", "forward", "up", "up", "forward", "forward", "forward", "down", "up", "forward", "forward", "forward", "down", "down", "forward", "down", "forward", "forward", "down", "down", "forward", "up", "up", "forward", "down", "down", "down", "up", "down", "forward", "up", "down", "down", "up", "up", "forward", "down", "down", "forward", "forward", "up", "forward", "down", "up", "up", "forward", "forward", "down", "down", "forward", "down", "down", "forward", "forward", "down", "forward", "down", "down", "up", "forward", "up", "up", "forward", "down", "up", "down", "down", "down", "forward", "forward", "up", "up", "down", "down", "up", "down", "forward", "down", "down", "down", "forward", "up", "up", "down", "forward", "forward", "forward", "forward", "down", "forward", "forward", "up", "down", "down", "forward", "forward", "down", "forward", "forward", "up", "down", "forward", "forward", "down", "down", "forward", "forward", "forward", "down", "up", "down", "forward", "forward", "forward", "up", "up", "down", "up", "forward", "up", "forward", "down", "up", "down", "down", "forward", "down", "up", "forward", "down", "down", "down", "down", "down", "down", "forward", "down", "up", "down", "down", "down", "forward", "forward", "forward", "up", "forward", "forward", "forward", "forward", "down", "forward", "down", "forward", "forward", "up", "forward", "down", "forward", "forward", "down", "forward", "forward", "up", "down", "up", "down", "down", "forward", "forward", "forward", "forward", "down", "forward", "forward", "forward", "forward", "forward", "down", "down", "forward", "forward", "down", "up", "up", "down", "forward", "forward", "forward", "forward", "up", "down", "forward", "down", "down", "down", "down", "down", "forward", "down", "forward", "down", "down", "forward", "forward", "down", "down", "down", "forward", "down", "forward", "up", "down", "forward", "forward", "down", "forward", "forward", "forward", "forward", "down", "forward", "forward", "up", "forward", "forward", "forward", "forward", "down", "up", "down", "up", "up", "up", "forward", "down", "up", "down", "down", "forward", "up", "down", "forward", "up", "forward", "down", "down", "down", "forward", "forward", "down", "up", "down", "down", "up", "down", "up", "down", "forward", "forward", "forward", "down", "up", "up", "forward", "down", "forward", "up", "up", "down", "down", "forward", "down", "forward", "forward", "forward", "down", "forward", "up", "forward", "down", "forward", "down", "down", "forward", "down", "forward", "forward", "down", "forward", "forward", "up", "forward", "forward", "up", "up", "forward", "forward", "down", "forward", "down", "forward", "down", "up", "down", "forward", "forward", "down", "up", "forward", "forward", "up", "forward", "down", "forward", "down", "down", "forward", "forward", "down", "forward", "forward", "up", "forward", "down", "up", "down", "forward", "down", "down", "up", "up", "forward", "down", "forward", "down", "forward", "forward", "down", "down", "down", "forward", "forward", "down", "down", "forward", "forward", "forward", "down", "forward", "forward", "down", "forward", "down", "forward", "down", "down", "up", "down", "down", "up", "down", "up", "forward", "down", "down", "forward", "up", "down", "forward", "down", "forward", "up", "forward", "up", "forward", "down", "down", "forward", "down", "down", "up", "down", "down", "down", "forward", "down", "forward", "forward", "down", "forward", "down", "up", "up", "up", "forward", "forward", "down", "down", "forward", "up", "forward", "up", "forward", "down", "down", "forward", "down", "up", "forward", "up", "down", "down", "down", "up", "forward", "forward", "down", "forward", "down", "down", "forward", "down", "forward", "up", "forward", "forward", "forward", "up", "up", "down", "up", "up", "down", "forward", "down", "forward", "up", "forward", "forward", "down", "down", "up", "down", "up", "forward", "up", "forward", "forward", "down", "up", "down", "forward", "forward", "down", "up", "down", "up", "down", "down", "forward", "down", "forward", "forward", "up", "forward", "up", "up", "up", "up", "down", "forward", "down", "down", "forward", "down", "down", "forward", "down", "forward", "up", "down", "up", "down", "forward", "down", "forward", "down", "forward", "forward", "forward", "down", "down", "forward", "forward", "forward", "forward", "down", "down", "up", "forward", "up", "down", "up", "up", "forward", "forward", "down", "down", "forward", "forward", "up", "forward", "forward", "forward", "down", "down", "forward", "forward", "down", "down", "forward", "down", "forward", "down", "forward", "down", "up", "forward", "forward", "down", "up", "down", "down", "forward", "down", "up", "down", "forward", "forward", "forward", "forward", "up", "up", "forward", "up", "forward", "up", "forward", "forward", "down", "up", "down", "down", "up", "forward", "down", "up", "forward", "down", "down", "down", "forward", "forward", "up", "forward", "forward", "up", "down", "down", "forward", "down", "up", "up", "down", "forward", "up", "forward", "forward", "forward", "down", "forward", "down", "forward", "down", "up", "down", "down", "down", "up", "up", "down", "down", "down", "forward", "up", "up", "down", "forward", "forward", "down", "up", "down", "down", "down", "down", "down", "forward", "down", "forward", "down", "down", "down", "forward", "down", "up", "forward", "down", "down", "down", "forward", "up", "forward", "up", "down", "down", "up", "forward", "forward", "down", "forward", "forward", "forward", "forward", "forward", "forward", "down", "up", "forward", "down", "down", "forward", "forward", "forward", "forward", "down", "up", "down", "up", "forward", "down", "up", "down", "up", "forward", "forward", "forward", "up", "down", "down", "forward", "down", "down", "up", "down", "down", "forward", "up", "down", "forward"};
    int intInput[1000] = {4, 9, 2, 2, 7, 2, 9, 8, 7, 9, 4, 6, 2, 5, 1, 5, 2, 4, 2, 3, 2, 6, 8, 8, 8, 8, 7, 2, 9, 2, 9, 4, 8, 6, 3, 9, 1, 6, 3, 8, 9, 1, 9, 3, 7, 2, 7, 5, 3, 1, 6, 2, 4, 6, 8, 2, 5, 6, 5, 7, 8, 2, 9, 4, 6, 4, 6, 9, 7, 9, 9, 8, 7, 7, 9, 8, 1, 4, 3, 6, 6, 2, 3, 6, 5, 8, 3, 8, 4, 4, 5, 6, 5, 6, 2, 5, 4, 8, 5, 5, 6, 9, 5, 2, 5, 7, 7, 9, 2, 3, 3, 8, 5, 1, 1, 3, 5, 8, 7, 8, 5, 8, 2, 8, 8, 7, 1, 7, 6, 4, 7, 7, 3, 7, 2, 7, 4, 5, 8, 9, 7, 5, 6, 6, 8, 3, 5, 3, 8, 7, 8, 6, 2, 4, 3, 3, 9, 9, 1, 7, 2, 1, 9, 7, 6, 2, 3, 4, 3, 3, 1, 4, 8, 6, 3, 4, 5, 4, 1, 3, 9, 6, 2, 5, 1, 8, 2, 6, 5, 3, 7, 2, 7, 9, 3, 9, 1, 9, 9, 3, 3, 2, 9, 2, 3, 3, 7, 3, 2, 1, 6, 9, 4, 9, 8, 3, 5, 8, 9, 5, 4, 5, 4, 7, 3, 9, 7, 2, 7, 3, 3, 7, 9, 4, 8, 8, 6, 9, 4, 9, 9, 6, 7, 2, 2, 7, 7, 9, 6, 2, 4, 8, 4, 4, 4, 6, 6, 9, 3, 7, 2, 2, 4, 4, 6, 2, 2, 1, 1, 7, 5, 9, 8, 4, 8, 5, 4, 8, 4, 7, 9, 3, 6, 6, 6, 9, 6, 5, 5, 9, 9, 9, 1, 5, 5, 7, 3, 6, 5, 8, 6, 7, 5, 4, 4, 9, 3, 9, 9, 1, 7, 4, 1, 1, 1, 9, 8, 8, 3, 7, 4, 5, 5, 7, 7, 6, 2, 4, 8, 3, 3, 2, 4, 9, 1, 2, 2, 6, 9, 8, 4, 5, 4, 4, 8, 6, 8, 9, 8, 1, 2, 2, 4, 7, 5, 7, 5, 3, 7, 4, 8, 8, 1, 2, 6, 8, 9, 5, 2, 5, 4, 6, 7, 3, 5, 9, 5, 1, 6, 7, 9, 8, 2, 9, 2, 3, 9, 3, 9, 3, 7, 2, 5, 3, 9, 1, 2, 4, 6, 5, 5, 7, 3, 1, 1, 8, 4, 1, 4, 5, 9, 7, 2, 1, 7, 9, 9, 8, 9, 5, 9, 9, 9, 7, 8, 2, 9, 1, 3, 8, 4, 4, 4, 3, 7, 3, 6, 9, 1, 2, 3, 9, 5, 6, 8, 2, 1, 3, 4, 1, 9, 4, 1, 2, 8, 9, 3, 2, 5, 2, 6, 5, 8, 3, 7, 2, 8, 9, 7, 7, 7, 7, 4, 1, 9, 9, 5, 8, 7, 7, 1, 3, 7, 2, 4, 7, 1, 5, 5, 1, 8, 7, 2, 3, 1, 7, 1, 2, 9, 6, 3, 2, 4, 7, 7, 5, 7, 2, 9, 8, 8, 9, 3, 7, 1, 4, 2, 7, 3, 9, 2, 3, 4, 8, 6, 4, 6, 7, 9, 9, 8, 1, 1, 1, 1, 7, 3, 3, 2, 7, 8, 7, 5, 7, 9, 2, 9, 3, 9, 9, 3, 1, 7, 8, 7, 4, 5, 6, 4, 3, 5, 8, 5, 6, 1, 1, 8, 8, 5, 8, 9, 8, 2, 6, 3, 3, 8, 4, 6, 2, 9, 9, 2, 9, 1, 6, 2, 9, 8, 3, 6, 6, 9, 8, 4, 2, 5, 4, 4, 5, 9, 3, 1, 1, 6, 2, 7, 7, 5, 2, 8, 5, 1, 7, 7, 4, 7, 2, 6, 9, 4, 3, 8, 2, 6, 3, 9, 4, 2, 6, 1, 5, 2, 1, 1, 2, 4, 7, 6, 4, 7, 8, 3, 8, 7, 2, 5, 3, 7, 5, 2, 8, 6, 8, 7, 3, 2, 2, 8, 2, 5, 1, 6, 1, 2, 1, 6, 9, 9, 8, 3, 5, 3, 3, 1, 4, 8, 2, 7, 9, 4, 4, 6, 4, 8, 8, 2, 7, 9, 5, 4, 3, 5, 8, 4, 6, 1, 2, 6, 4, 8, 1, 7, 6, 2, 1, 8, 2, 3, 3, 2, 9, 3, 4, 3, 9, 6, 8, 8, 1, 8, 5, 9, 5, 5, 5, 4, 7, 6, 9, 4, 7, 5, 7, 5, 3, 5, 8, 3, 4, 2, 1, 6, 6, 3, 5, 8, 2, 6, 5, 4, 9, 6, 6, 5, 4, 5, 1, 6, 2, 8, 4, 2, 3, 4, 5, 8, 5, 6, 9, 6, 3, 3, 2, 9, 5, 5, 3, 2, 5, 2, 5, 8, 2, 1, 2, 6, 8, 3, 2, 2, 1, 8, 2, 6, 6, 3, 8, 2, 4, 7, 6, 3, 2, 5, 7, 6, 1, 4, 4, 1, 3, 3, 4, 1, 2, 6, 7, 3, 1, 5, 7, 9, 7, 2, 7, 8, 1, 1, 6, 2, 7, 9, 4, 9, 9, 6, 3, 9, 1, 1, 8, 6, 1, 9, 2, 1, 2, 9, 9, 6, 5, 6, 4, 3, 1, 4, 5, 6, 3, 2, 3, 9, 2, 1, 4, 2, 6, 6, 7, 3, 9, 7, 2, 2, 2, 1, 2, 8, 5, 6, 7, 4, 1, 8, 1, 3, 8, 8, 6, 1, 6, 1, 7, 3, 6, 1, 3, 5, 1, 5, 5, 7, 3, 6, 6, 7, 5, 2, 1, 8, 3, 3, 5, 4, 4, 8, 7, 7, 9, 2, 4, 1, 4, 9, 8, 4, 2, 8, 1, 2, 5, 3, 8, 8, 6, 5, 7, 3, 5, 6, 9, 2, 8, 4, 2, 4, 8, 5, 4, 2, 3, 4, 3, 8, 2, 8, 4, 6, 3, 9, 6, 8, 5, 1, 5, 3, 2, 4, 4, 3, 1, 3, 7, 9, 2, 4, 3, 8, 9, 5, 9, 1, 4, 7, 2, 4, 8, 4, 1, 8, 4, 7, 1, 3, 2, 5, 6, 7, 2};

    for (int i=0; i < 1000; i++)
        subMoving.push_back(make_pair(strInput[i],intInput[i]));
    

    part1_solution(subMoving);
    cout << endl;
    part2_solution(subMoving);

    return 0;
}

void part1_solution(vector <pair<string,int>> subMoving)
{
    
    int countingForward = 0;
    int countingDepth = 0;
    
    for (auto data:subMoving)
    {
        if (data.first == "forward")
            countingForward += data.second;
        else if (data.first == "down")
            countingDepth += data.second;
        else
            countingDepth -= data.second;
    }

    cout << countingForward * countingDepth;
}
void part2_solution(vector <pair<string,int>> subMoving)
{
    int countingForward = 0;
    int countingDepth = 0;
    int countingAim = 0;
    
    for (auto data:subMoving)
    {
        if (data.first == "forward")
        {
            countingForward += data.second;
            countingDepth += data.second * countingAim;
        }
        else if (data.first == "down")
            countingAim += data.second;
        else
            countingAim -= data.second;
    }

    cout << countingForward * countingDepth;
}